From d69f2cdf233d8ea951bb0426fef72702fe33fb3f Mon Sep 17 00:00:00 2001
From: Ulrich Hecht <uli@suse.de>
Date: Tue, 14 Apr 2009 16:37:42 +0200
Subject: [PATCH 010/169] block/vmdk: Support creation of SCSI VMDK images in
 qemu-img
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: Ulrich Hecht <uli@suse.de>
[AF: Changed BLOCK_FLAG_SCSI from 8 to 16 for v1.2]
[AF: Rebased onto upstream VMDK SCSI support]
[MM: Rebased onto v1.5]
Signed-off-by: Andreas FÃ¤rber <afaerber@suse.de>
---
 block.c                   | 4 ++++
 block/vmdk.c              | 9 ++++++++-
 include/block/block_int.h | 2 ++
 qemu-img.c                | 8 +++++++-
 4 files changed, 21 insertions(+), 2 deletions(-)

Index: qemu-1.6.0+dfsg/block.c
===================================================================
--- qemu-1.6.0+dfsg.orig/block.c	2013-11-05 22:23:17.647430273 +0000
+++ qemu-1.6.0+dfsg/block.c	2013-11-05 22:23:17.647430273 +0000
@@ -4580,8 +4580,12 @@
     }
 
     if (!quiet) {
+	QEMUOptionParameter *scsi;
         printf("Formatting '%s', fmt=%s ", filename, fmt);
         print_option_parameters(param);
+	scsi = get_option_parameter(param, BLOCK_OPT_SCSI);
+	if (scsi && scsi->value.n)
+	    printf(", SCSI");
         puts("");
     }
     ret = bdrv_create(drv, filename, param);
Index: qemu-1.6.0+dfsg/block/vmdk.c
===================================================================
--- qemu-1.6.0+dfsg.orig/block/vmdk.c	2013-11-05 22:23:17.647430273 +0000
+++ qemu-1.6.0+dfsg/block/vmdk.c	2013-11-05 22:23:17.647430273 +0000
@@ -1588,6 +1588,8 @@
             fmt = options->value.s;
         } else if (!strcmp(options->name, BLOCK_OPT_ZEROED_GRAIN)) {
             zeroed_grain |= options->value.n;
+        } else if (!strcmp(options->name, BLOCK_OPT_SCSI)) {
+            flags |= options->value.n ? BLOCK_FLAG_SCSI: 0;
         }
         options++;
     }
@@ -1691,7 +1693,7 @@
             ext_desc_lines,
             (flags & BLOCK_FLAG_COMPAT6 ? 6 : 4),
             total_size / (int64_t)(63 * number_heads * 512), number_heads,
-                adapter_type);
+            flags & BLOCK_FLAG_SCSI ? "lsilogic" : adapter_type);
     if (split || flat) {
         fd = qemu_open(filename,
                        O_WRONLY | O_CREAT | O_TRUNC | O_BINARY | O_LARGEFILE,
@@ -1820,6 +1822,11 @@
         .type = OPT_FLAG,
         .help = "Enable efficient zero writes using the zeroed-grain GTE feature"
     },
+    {
+        .name = BLOCK_OPT_SCSI,
+        .type = OPT_FLAG,
+        .help = "SCSI image"
+    },
     { NULL }
 };
 
Index: qemu-1.6.0+dfsg/include/block/block_int.h
===================================================================
--- qemu-1.6.0+dfsg.orig/include/block/block_int.h	2013-11-05 22:23:17.647430273 +0000
+++ qemu-1.6.0+dfsg/include/block/block_int.h	2013-11-05 22:23:17.647430273 +0000
@@ -38,6 +38,7 @@
 #define BLOCK_FLAG_ENCRYPT          1
 #define BLOCK_FLAG_COMPAT6          4
 #define BLOCK_FLAG_LAZY_REFCOUNTS   8
+#define BLOCK_FLAG_SCSI             16
 
 #define BLOCK_IO_LIMIT_READ     0
 #define BLOCK_IO_LIMIT_WRITE    1
@@ -49,6 +50,7 @@
 #define BLOCK_OPT_SIZE              "size"
 #define BLOCK_OPT_ENCRYPT           "encryption"
 #define BLOCK_OPT_COMPAT6           "compat6"
+#define BLOCK_OPT_SCSI              "scsi"
 #define BLOCK_OPT_BACKING_FILE      "backing_file"
 #define BLOCK_OPT_BACKING_FMT       "backing_fmt"
 #define BLOCK_OPT_CLUSTER_SIZE      "cluster_size"
Index: qemu-1.6.0+dfsg/qemu-img.c
===================================================================
--- qemu-1.6.0+dfsg.orig/qemu-img.c	2013-11-05 22:23:17.647430273 +0000
+++ qemu-1.6.0+dfsg/qemu-img.c	2013-11-05 22:23:17.647430273 +0000
@@ -1127,7 +1127,7 @@
     const uint8_t *buf1;
     BlockDriverInfo bdi;
     QEMUOptionParameter *param = NULL, *create_options = NULL;
-    QEMUOptionParameter *out_baseimg_param;
+    QEMUOptionParameter *out_baseimg_param, *scsi;
     char *options = NULL;
     const char *snapshot_name = NULL;
     float local_progress = 0;
@@ -1329,6 +1329,12 @@
         }
     }
 
+    if ((scsi = get_option_parameter(param, BLOCK_OPT_SCSI)) && scsi->value.n && strcmp(drv->format_name, "vmdk")) {
+        error_report("SCSI devices not supported for this file format");
+        ret = -1;
+        goto out;
+    }
+
     /* Create the new image */
     ret = bdrv_create(drv, out_filename, param);
     if (ret < 0) {
