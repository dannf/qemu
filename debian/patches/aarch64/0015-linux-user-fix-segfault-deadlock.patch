From 9b0b1e0e72563eb2ca896dcba8fca29a1d16ca75 Mon Sep 17 00:00:00 2001
From: Alexander Graf <agraf@suse.de>
Date: Fri, 13 Jan 2012 17:05:41 +0100
Subject: [PATCH 015/169] linux-user: fix segfault deadlock

When entering the guest we take a lock to ensure that nobody else messes
with our TB chaining while we're doing it. If we get a segfault inside that
code, we manage to work on, but will not unlock the lock.

This patch forces unlocking of that lock in the segv handler. I'm not sure
this is the right approach though. Maybe we should rather make sure we don't
segfault in the code? I would greatly appreciate someone more intelligible
than me to look at this :).

Example code to trigger this is at: http://csgraf.de/tmp/conftest.c

Reported-by: Fabio Erculiani <lxnay@sabayon.org>
Signed-off-by: Alexander Graf <agraf@suse.de>
---
 include/exec/spinlock.h | 10 ++++++++++
 user-exec.c             |  4 ++++
 2 files changed, 14 insertions(+)

Index: qemu-1.6.0+dfsg/include/exec/spinlock.h
===================================================================
--- qemu-1.6.0+dfsg.orig/include/exec/spinlock.h	2013-11-05 22:23:18.683427590 +0000
+++ qemu-1.6.0+dfsg/include/exec/spinlock.h	2013-11-05 22:23:18.683427590 +0000
@@ -24,6 +24,12 @@
 #include <pthread.h>
 #define spin_lock pthread_mutex_lock
 #define spin_unlock pthread_mutex_unlock
+static inline void spin_unlock_safe(pthread_mutex_t *lock)
+{
+    /* unlocking an unlocked mutex results in undefined behavior */
+    pthread_mutex_trylock(lock);
+    pthread_mutex_unlock(lock);
+}
 #define spinlock_t pthread_mutex_t
 #define SPIN_LOCK_UNLOCKED PTHREAD_MUTEX_INITIALIZER
 
@@ -46,4 +52,8 @@
 {
 }
 
+static inline void spin_unlock_safe(spinlock_t *lock)
+{
+}
+
 #endif
Index: qemu-1.6.0+dfsg/user-exec.c
===================================================================
--- qemu-1.6.0+dfsg.orig/user-exec.c	2013-11-05 22:23:18.683427590 +0000
+++ qemu-1.6.0+dfsg/user-exec.c	2013-11-05 22:23:18.683427590 +0000
@@ -89,6 +89,10 @@
     qemu_printf("qemu: SIGSEGV pc=0x%08lx address=%08lx w=%d oldset=0x%08lx\n",
                 pc, address, is_write, *(unsigned long *)old_set);
 #endif
+
+    /* Maybe we're still holding the TB fiddling lock? */
+    spin_unlock_safe(&tcg_ctx.tb_ctx.tb_lock);
+
     /* XXX: locking issue */
     if (is_write && h2g_valid(address)
         && page_unprotect(h2g(address), pc, puc)) {
