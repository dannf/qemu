From e919b4073f69ba07355c13428fca4148179aa8f5 Mon Sep 17 00:00:00 2001
From: Alexander Graf <agraf@suse.de>
Date: Thu, 5 Jul 2012 17:31:39 +0200
Subject: [PATCH 020/169] linux-user: lock tcg
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

The tcg code generator is not thread safe. Lock its generation between
different threads.

Signed-off-by: Alexander Graf <agraf@suse.de>
[AF: Rebased onto exec.c/translate-all.c split for 1.4]
Signed-off-by: Andreas FÃ¤rber <afaerber@suse.de>
---
 linux-user/mmap.c |  3 +++
 tcg/tcg.c         | 36 ++++++++++++++++++++++++++++++++++--
 tcg/tcg.h         |  6 ++++++
 3 files changed, 43 insertions(+), 2 deletions(-)

Index: qemu-1.6.0+dfsg/linux-user/mmap.c
===================================================================
--- qemu-1.6.0+dfsg.orig/linux-user/mmap.c	2013-11-05 22:23:19.703424950 +0000
+++ qemu-1.6.0+dfsg/linux-user/mmap.c	2013-11-05 22:23:19.691424981 +0000
@@ -30,6 +30,7 @@
 
 #include "qemu.h"
 #include "qemu-common.h"
+#include "tcg.h"
 
 //#define DEBUG_MMAP
 
@@ -40,6 +41,7 @@
 {
     if (mmap_lock_count++ == 0) {
         pthread_mutex_lock(&mmap_mutex);
+        tcg_lock();
     }
 }
 
@@ -47,6 +49,7 @@
 {
     if (--mmap_lock_count == 0) {
         pthread_mutex_unlock(&mmap_mutex);
+        tcg_unlock();
     }
 }
 
Index: qemu-1.6.0+dfsg/tcg/tcg.c
===================================================================
--- qemu-1.6.0+dfsg.orig/tcg/tcg.c	2013-11-05 22:23:19.703424950 +0000
+++ qemu-1.6.0+dfsg/tcg/tcg.c	2013-11-05 22:23:19.691424981 +0000
@@ -40,6 +40,8 @@
 #include "qemu/cache-utils.h"
 #include "qemu/host-utils.h"
 #include "qemu/timer.h"
+#include "config-host.h"
+#include "qemu/thread.h"
 
 /* Note: the long term plan is to reduce the dependancies on the QEMU
    CPU definitions. Currently they are used for qemu_ld/st
@@ -114,6 +116,29 @@
 static TCGRegSet tcg_target_available_regs[2];
 static TCGRegSet tcg_target_call_clobber_regs;
 
+#ifdef CONFIG_USER_ONLY
+static __thread int tcg_lock_count;
+#endif
+void tcg_lock(void)
+{
+#ifdef CONFIG_USER_ONLY
+    TCGContext *s = &tcg_ctx;
+    if (tcg_lock_count++ == 0) {
+        qemu_mutex_lock(&s->lock);
+    }
+#endif
+}
+
+void tcg_unlock(void)
+{
+#ifdef CONFIG_USER_ONLY
+    TCGContext *s = &tcg_ctx;
+    if (--tcg_lock_count == 0) {
+        qemu_mutex_unlock(&s->lock);
+    }
+#endif
+}
+
 static inline void tcg_out8(TCGContext *s, uint8_t v)
 {
     *s->code_ptr++ = v;
@@ -253,7 +278,8 @@
 
     memset(s, 0, sizeof(*s));
     s->nb_globals = 0;
-    
+    qemu_mutex_init(&s->lock);
+
     /* Count total number of arguments and allocate the corresponding
        space */
     total_args = 0;
@@ -2379,11 +2405,13 @@
     }
 #endif
 
+    tcg_lock();
     tcg_gen_code_common(s, gen_code_buf, -1);
 
     /* flush instruction cache */
     flush_icache_range((tcg_target_ulong)gen_code_buf,
                        (tcg_target_ulong)s->code_ptr);
+    tcg_unlock();
 
     return s->code_ptr -  gen_code_buf;
 }
@@ -2394,7 +2422,11 @@
    Return -1 if not found. */
 int tcg_gen_code_search_pc(TCGContext *s, uint8_t *gen_code_buf, long offset)
 {
-    return tcg_gen_code_common(s, gen_code_buf, offset);
+    int r;
+    tcg_lock();
+    r = tcg_gen_code_common(s, gen_code_buf, offset);
+    tcg_unlock();
+    return r;
 }
 
 #ifdef CONFIG_PROFILER
Index: qemu-1.6.0+dfsg/tcg/tcg.h
===================================================================
--- qemu-1.6.0+dfsg.orig/tcg/tcg.h	2013-11-05 22:23:19.703424950 +0000
+++ qemu-1.6.0+dfsg/tcg/tcg.h	2013-11-05 22:23:19.695424972 +0000
@@ -46,6 +46,8 @@
 #error unsupported
 #endif
 
+#include "config-host.h"
+#include "qemu/thread.h"
 #include "tcg-target.h"
 #include "tcg-runtime.h"
 
@@ -490,6 +492,7 @@
     TCGLabelQemuLdst *qemu_ldst_labels;
     int nb_qemu_ldst_labels;
 #endif
+    QemuMutex lock;
 };
 
 extern TCGContext tcg_ctx;
@@ -670,6 +673,9 @@
 TCGArg *tcg_optimize(TCGContext *s, uint16_t *tcg_opc_ptr, TCGArg *args,
                      TCGOpDef *tcg_op_def);
 
+extern void tcg_lock(void);
+extern void tcg_unlock(void);
+
 /* only used for debugging purposes */
 void tcg_register_helper(void *func, const char *name);
 const char *tcg_helper_get_name(TCGContext *s, void *func);
