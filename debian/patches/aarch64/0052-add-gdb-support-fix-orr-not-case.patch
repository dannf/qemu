From 3eb7deb18bdfd37f67a38ce5aa1409bda1262365 Mon Sep 17 00:00:00 2001
From: Alexander Graf <agraf@suse.de>
Date: Mon, 11 Feb 2013 17:03:51 +0100
Subject: [PATCH 052/169] add gdb support, fix orr not case

[matz: rebase to changed gdbstub infrastructure]
---
 configure                       |  3 +-
 gdb-xml/aarch64-core.xml        | 46 ++++++++++++++++++++++
 gdb-xml/aarch64-fpu.xml         | 86 +++++++++++++++++++++++++++++++++++++++++
 gdb-xml/aarch64-without-fpu.xml | 13 +++++++
 gdb-xml/aarch64.xml             | 14 +++++++
 target-arm/cpu.c                |  5 +++
 target-arm/gdbstub.c            | 57 +++++++++++++++++++++++++++
 target-arm/translate-a64.c      | 26 ++++++++-----
 8 files changed, 240 insertions(+), 10 deletions(-)
 create mode 100644 gdb-xml/aarch64-core.xml
 create mode 100644 gdb-xml/aarch64-fpu.xml
 create mode 100644 gdb-xml/aarch64-without-fpu.xml
 create mode 100644 gdb-xml/aarch64.xml

Index: qemu-1.6.0+dfsg/configure
===================================================================
--- qemu-1.6.0+dfsg.orig/configure	2013-11-05 22:23:26.835406486 +0000
+++ qemu-1.6.0+dfsg/configure	2013-11-05 22:23:26.831406496 +0000
@@ -4264,7 +4264,8 @@
     TARGET_ABI_DIR=arm
     bflt="yes"
     target_nptl="yes"
-    gdb_xml_files="arm-core.xml arm-vfp.xml arm-vfp3.xml arm-neon.xml"
+    gdb_xml_files="aarch64-core.xml aarch64-fpu.xml"
+#gdb-xml/aarch64-core.xml  gdb-xml/aarch64-fpu.xml  gdb-xml/aarch64-without-fpu.xml  gdb-xml/aarch64.xml
     #gdb_xml_files="power64-core.xml power-fpu.xml power-altivec.xml power-spe.xml"
     target_long_alignment=8
     target_libs_softmmu="$fdt_libs"
Index: qemu-1.6.0+dfsg/gdb-xml/aarch64-core.xml
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ qemu-1.6.0+dfsg/gdb-xml/aarch64-core.xml	2013-11-05 22:23:26.835406486 +0000
@@ -0,0 +1,46 @@
+<?xml version="1.0"?>
+<!-- Copyright (C) 2009-2012 Free Software Foundation, Inc.
+     Contributed by ARM Ltd.
+
+     Copying and distribution of this file, with or without modification,
+     are permitted in any medium without royalty provided the copyright
+     notice and this notice are preserved.  -->
+
+<!DOCTYPE feature SYSTEM "gdb-target.dtd">
+<feature name="org.gnu.gdb.aarch64.core">
+  <reg name="x0" bitsize="64"/>
+  <reg name="x1" bitsize="64"/>
+  <reg name="x2" bitsize="64"/>
+  <reg name="x3" bitsize="64"/>
+  <reg name="x4" bitsize="64"/>
+  <reg name="x5" bitsize="64"/>
+  <reg name="x6" bitsize="64"/>
+  <reg name="x7" bitsize="64"/>
+  <reg name="x8" bitsize="64"/>
+  <reg name="x9" bitsize="64"/>
+  <reg name="x10" bitsize="64"/>
+  <reg name="x11" bitsize="64"/>
+  <reg name="x12" bitsize="64"/>
+  <reg name="x13" bitsize="64"/>
+  <reg name="x14" bitsize="64"/>
+  <reg name="x15" bitsize="64"/>
+  <reg name="x16" bitsize="64"/>
+  <reg name="x17" bitsize="64"/>
+  <reg name="x18" bitsize="64"/>
+  <reg name="x19" bitsize="64"/>
+  <reg name="x20" bitsize="64"/>
+  <reg name="x21" bitsize="64"/>
+  <reg name="x22" bitsize="64"/>
+  <reg name="x23" bitsize="64"/>
+  <reg name="x24" bitsize="64"/>
+  <reg name="x25" bitsize="64"/>
+  <reg name="x26" bitsize="64"/>
+  <reg name="x27" bitsize="64"/>
+  <reg name="x28" bitsize="64"/>
+  <reg name="x29" bitsize="64"/>
+  <reg name="x30" bitsize="64"/>
+  <reg name="sp" bitsize="64" type="data_ptr"/>
+
+  <reg name="pc" bitsize="64" type="code_ptr"/>
+  <reg name="cpsr" bitsize="32"/>
+</feature>
Index: qemu-1.6.0+dfsg/gdb-xml/aarch64-fpu.xml
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ qemu-1.6.0+dfsg/gdb-xml/aarch64-fpu.xml	2013-11-05 22:23:26.835406486 +0000
@@ -0,0 +1,86 @@
+<?xml version="1.0"?>
+<!-- Copyright (C) 2009-2012 Free Software Foundation, Inc.
+     Contributed by ARM Ltd.
+
+     Copying and distribution of this file, with or without modification,
+     are permitted in any medium without royalty provided the copyright
+     notice and this notice are preserved.  -->
+
+<!DOCTYPE feature SYSTEM "gdb-target.dtd">
+<feature name="org.gnu.gdb.aarch64.fpu">
+  <vector id="v2d" type="ieee_double" count="2"/>
+  <vector id="v2u" type="uint64" count="2"/>
+  <vector id="v2i" type="int64" count="2"/>
+  <vector id="v4f" type="ieee_single" count="4"/>
+  <vector id="v4u" type="uint32" count="4"/>
+  <vector id="v4i" type="int32" count="4"/>
+  <vector id="v8u" type="uint16" count="8"/>
+  <vector id="v8i" type="int16" count="8"/>
+  <vector id="v16u" type="uint8" count="16"/>
+  <vector id="v16i" type="int8" count="16"/>
+  <vector id="v1u" type="uint128" count="1"/>
+  <vector id="v1i" type="int128" count="1"/>
+  <union id="vnd">
+    <field name="f" type="v2d"/>
+    <field name="u" type="v2u"/>
+    <field name="s" type="v2i"/>
+  </union>
+  <union id="vns">
+    <field name="f" type="v4f"/>
+    <field name="u" type="v4u"/>
+    <field name="s" type="v4i"/>
+  </union>
+  <union id="vnh">
+    <field name="u" type="v8u"/>
+    <field name="s" type="v8i"/>
+  </union>
+  <union id="vnb">
+    <field name="u" type="v16u"/>
+    <field name="s" type="v16i"/>
+  </union>
+  <union id="vnq">
+    <field name="u" type="v1u"/>
+    <field name="s" type="v1i"/>
+  </union>
+  <union id="aarch64v">
+    <field name="d" type="vnd"/>
+    <field name="s" type="vns"/>
+    <field name="h" type="vnh"/>
+    <field name="b" type="vnb"/>
+    <field name="q" type="vnq"/>
+  </union>
+  <reg name="v0" bitsize="128" type="aarch64v" regnum="34"/>
+  <reg name="v1" bitsize="128" type="aarch64v" />
+  <reg name="v2" bitsize="128" type="aarch64v" />
+  <reg name="v3" bitsize="128" type="aarch64v" />
+  <reg name="v4" bitsize="128" type="aarch64v" />
+  <reg name="v5" bitsize="128" type="aarch64v" />
+  <reg name="v6" bitsize="128" type="aarch64v" />
+  <reg name="v7" bitsize="128" type="aarch64v" />
+  <reg name="v8" bitsize="128" type="aarch64v" />
+  <reg name="v9" bitsize="128" type="aarch64v" />
+  <reg name="v10" bitsize="128" type="aarch64v"/>
+  <reg name="v11" bitsize="128" type="aarch64v"/>
+  <reg name="v12" bitsize="128" type="aarch64v"/>
+  <reg name="v13" bitsize="128" type="aarch64v"/>
+  <reg name="v14" bitsize="128" type="aarch64v"/>
+  <reg name="v15" bitsize="128" type="aarch64v"/>
+  <reg name="v16" bitsize="128" type="aarch64v"/>
+  <reg name="v17" bitsize="128" type="aarch64v"/>
+  <reg name="v18" bitsize="128" type="aarch64v"/>
+  <reg name="v19" bitsize="128" type="aarch64v"/>
+  <reg name="v20" bitsize="128" type="aarch64v"/>
+  <reg name="v21" bitsize="128" type="aarch64v"/>
+  <reg name="v22" bitsize="128" type="aarch64v"/>
+  <reg name="v23" bitsize="128" type="aarch64v"/>
+  <reg name="v24" bitsize="128" type="aarch64v"/>
+  <reg name="v25" bitsize="128" type="aarch64v"/>
+  <reg name="v26" bitsize="128" type="aarch64v"/>
+  <reg name="v27" bitsize="128" type="aarch64v"/>
+  <reg name="v28" bitsize="128" type="aarch64v"/>
+  <reg name="v29" bitsize="128" type="aarch64v"/>
+  <reg name="v30" bitsize="128" type="aarch64v"/>
+  <reg name="v31" bitsize="128" type="aarch64v"/>
+  <reg name="fpsr" bitsize="32"/>
+  <reg name="fpcr" bitsize="32"/>
+</feature>
Index: qemu-1.6.0+dfsg/gdb-xml/aarch64-without-fpu.xml
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ qemu-1.6.0+dfsg/gdb-xml/aarch64-without-fpu.xml	2013-11-05 22:23:26.835406486 +0000
@@ -0,0 +1,13 @@
+<?xml version="1.0"?>
+<!-- Copyright (C) 2009-2012 Free Software Foundation, Inc.
+     Contributed by ARM Ltd.
+
+     Copying and distribution of this file, with or without modification,
+     are permitted in any medium without royalty provided the copyright
+     notice and this notice are preserved.  -->
+
+<!DOCTYPE target SYSTEM "gdb-target.dtd">
+<target>
+  <architecture>aarch64</architecture>
+  <xi:include href="aarch64-core.xml"/>
+</target>
Index: qemu-1.6.0+dfsg/gdb-xml/aarch64.xml
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ qemu-1.6.0+dfsg/gdb-xml/aarch64.xml	2013-11-05 22:23:26.835406486 +0000
@@ -0,0 +1,14 @@
+<?xml version="1.0"?>
+<!-- Copyright (C) 2009-2012 Free Software Foundation, Inc.
+     Contributed by ARM Ltd.
+
+     Copying and distribution of this file, with or without modification,
+     are permitted in any medium without royalty provided the copyright
+     notice and this notice are preserved.  -->
+
+<!DOCTYPE target SYSTEM "gdb-target.dtd">
+<target>
+  <architecture>aarch64</architecture>
+  <xi:include href="aarch64-core.xml"/>
+  <xi:include href="aarch64-fpu.xml"/>
+</target>
Index: qemu-1.6.0+dfsg/target-arm/cpu.c
===================================================================
--- qemu-1.6.0+dfsg.orig/target-arm/cpu.c	2013-11-05 22:23:26.835406486 +0000
+++ qemu-1.6.0+dfsg/target-arm/cpu.c	2013-11-05 22:23:26.835406486 +0000
@@ -893,8 +893,13 @@
     cc->get_phys_page_debug = arm_cpu_get_phys_page_debug;
     cc->vmsd = &vmstate_arm_cpu;
 #endif
+#ifdef TARGET_ARM64
+    cc->gdb_num_core_regs = 34;
+    cc->gdb_core_xml_file = "aarch64-core.xml";
+#else
     cc->gdb_num_core_regs = 26;
     cc->gdb_core_xml_file = "arm-core.xml";
+#endif
 }
 
 static void cpu_register(const ARMCPUInfo *info)
Index: qemu-1.6.0+dfsg/target-arm/gdbstub.c
===================================================================
--- qemu-1.6.0+dfsg.orig/target-arm/gdbstub.c	2013-11-05 22:23:26.835406486 +0000
+++ qemu-1.6.0+dfsg/target-arm/gdbstub.c	2013-11-05 22:23:26.835406486 +0000
@@ -21,6 +21,62 @@
 #include "qemu-common.h"
 #include "exec/gdbstub.h"
 
+#ifdef TARGET_ARM64
+int arm_cpu_gdb_read_register(CPUState *cs, uint8_t *mem_buf, int n)
+{
+    ARMCPU *cpu = ARM_CPU(cs);
+    CPUARMState *env = &cpu->env;
+
+    if (n < 31) {
+        /* Core integer register.  */
+        gdb_get_reg64(mem_buf, env->xregs[n]);
+    }
+    switch (n) {
+    case 31:
+        gdb_get_reg64(mem_buf, env->sp);
+        break;
+    case 32:
+        gdb_get_reg64(mem_buf, env->pc);
+        break;
+    case 33:
+        gdb_get_reg32(mem_buf, env->pstate);
+        break;
+    }
+    /* Unknown register.  */
+    return 0;
+}
+
+int arm_cpu_gdb_write_register(CPUState *cs, uint8_t *mem_buf, int n)
+{
+    ARMCPU *cpu = ARM_CPU(cs);
+    CPUARMState *env = &cpu->env;
+    uint64_t tmp;
+
+    tmp = ldq_p(mem_buf);
+
+    if (n < 31) {
+        /* Core integer register.  */
+        env->xregs[n] = tmp;
+        return 8;
+    }
+    switch (n) {
+    case 31:
+        env->sp = tmp;
+        return 8;
+    case 32:
+        env->pc = tmp;
+        return 8;
+    case 33:
+        /* CPSR */
+        env->pstate = tmp;
+        //cpsr_write (env, tmp, 0xffffffff);
+        return 4;
+    }
+    /* Unknown register.  */
+    return 0;
+}
+#else
+
 /* Old gdb always expect FPA registers.  Newer (xml-aware) gdb only expect
    whatever the target description contains.  Due to a historical mishap
    the FPA registers appear in between core integer regs and the CPSR.
@@ -100,3 +156,4 @@
     /* Unknown register.  */
     return 0;
 }
+#endif
Index: qemu-1.6.0+dfsg/target-arm/translate-a64.c
===================================================================
--- qemu-1.6.0+dfsg.orig/target-arm/translate-a64.c	2013-11-05 22:23:26.835406486 +0000
+++ qemu-1.6.0+dfsg/target-arm/translate-a64.c	2013-11-05 22:23:26.835406486 +0000
@@ -202,11 +202,7 @@
         tcg_gen_movi_i64(cpu_reg(30), s->pc);
     }
     gen_goto_tb(s, 0, addr);
-    if (unlikely(s->singlestep_enabled)) {
-        s->is_jmp = DISAS_JUMP;
-    } else {
-        s->is_jmp = DISAS_TB_JUMP;
-    }
+    s->is_jmp = DISAS_TB_JUMP;
 }
 
 static void handle_br(DisasContext *s, uint32_t insn)
@@ -609,7 +605,7 @@
 
     tcg_op2 = get_shifti(rm, shift_type, shift_amount);
     if (is_n) {
-        tcg_gen_neg_i64(tcg_op2, tcg_op2);
+        tcg_gen_not_i64(tcg_op2, tcg_op2);
     }
 
     tcg_dest = cpu_reg(dest);
@@ -712,14 +708,15 @@
     bool is_32bit = !get_bits(insn, 31, 1);
     int extend_type = 0;
     TCGv_i64 tcg_op2;
-    TCGv_i64 tcg_src, tcg_dst;
+    TCGv_i64 tcg_src = tcg_temp_new_i64();
+    TCGv_i64 tcg_dst;
     TCGv_i64 tcg_result = tcg_temp_new_i64();
 
     if (extend && shift_type) {
         unallocated_encoding(s);
     }
 
-    tcg_src = cpu_reg(source);
+    tcg_gen_mov_i64(tcg_src, cpu_reg(source));
     tcg_dst = cpu_reg(dest);
     if (extend) {
         extend_type = get_bits(insn, 13, 3);
@@ -728,7 +725,7 @@
             unallocated_encoding(s);
         }
         if (!setflags) {
-            tcg_src = cpu_reg_sp(source);
+            tcg_gen_mov_i64(tcg_src, cpu_reg_sp(source));
             tcg_dst = cpu_reg_sp(dest);
         }
     } else {
@@ -749,6 +746,11 @@
         tcg_op2 = get_shifti(rm, shift_type, shift_amount);
     }
 
+    if (is_32bit) {
+        tcg_gen_ext32s_i64(tcg_src, tcg_src);
+        tcg_gen_ext32s_i64(tcg_op2, tcg_op2);
+    }
+
     if (sub_op) {
         tcg_gen_sub_i64(tcg_result, tcg_src, tcg_op2);
     } else {
@@ -765,6 +767,7 @@
         tcg_gen_mov_i64(tcg_dst, tcg_result);
     }
 
+    tcg_temp_free_i64(tcg_src);
     tcg_temp_free_i64(tcg_op2);
     tcg_temp_free_i64(tcg_result);
 }
@@ -1722,6 +1725,11 @@
         break;
     }
 
+    if (unlikely(s->singlestep_enabled) && (s->is_jmp == DISAS_TB_JUMP)) {
+        /* go through the main loop for single step */
+        s->is_jmp = DISAS_JUMP;
+    }
+
 #ifdef DEBUG_FLUSH
     if (s->is_jmp)
         gen_helper_tb_flush(cpu_env);
