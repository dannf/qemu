From 2199b42daf63d6030928becb477f0e7b3bfdacc8 Mon Sep 17 00:00:00 2001
From: Alexander Graf <agraf@suse.de>
Date: Wed, 20 Feb 2013 00:25:11 +0100
Subject: [PATCH 068/169] more fp conversion, fix sys_openat without /proc

---
 linux-user/syscall.c       |  3 ++-
 target-arm/helper-a64.c    |  5 +++++
 target-arm/helper.h        |  1 +
 target-arm/translate-a64.c | 38 +++++++++++++++++++++++++++++++++++---
 4 files changed, 43 insertions(+), 4 deletions(-)

Index: qemu-1.6.0+dfsg/linux-user/syscall.c
===================================================================
--- qemu-1.6.0+dfsg.orig/linux-user/syscall.c	2013-11-05 22:23:30.215397737 +0000
+++ qemu-1.6.0+dfsg/linux-user/syscall.c	2013-11-05 22:23:30.207397759 +0000
@@ -5212,7 +5212,8 @@
 
     r = resolve_dirfd_path(dirfd, path, real_path, sizeof(real_path));
     if (r < 0) {
-        return r;
+        /* /proc might not be mounted. Let the host handle this. */
+        return sys_openat(dirfd, path, flags, mode);
     } else if (r == 1) {
         return do_open(cpu_env, path, flags, mode);
     } else {
Index: qemu-1.6.0+dfsg/target-arm/helper-a64.c
===================================================================
--- qemu-1.6.0+dfsg.orig/target-arm/helper-a64.c	2013-11-05 22:23:30.215397737 +0000
+++ qemu-1.6.0+dfsg/target-arm/helper-a64.c	2013-11-05 22:23:30.207397759 +0000
@@ -260,3 +260,8 @@
     return float64_round_to_int(x, fp_status);
 }
 
+float32 HELPER(rints)(float32 x, void *fp_status)
+{
+    return float32_round_to_int(x, fp_status);
+}
+
Index: qemu-1.6.0+dfsg/target-arm/helper.h
===================================================================
--- qemu-1.6.0+dfsg.orig/target-arm/helper.h	2013-11-05 22:23:30.215397737 +0000
+++ qemu-1.6.0+dfsg/target-arm/helper.h	2013-11-05 22:23:30.207397759 +0000
@@ -486,6 +486,7 @@
 DEF_HELPER_FLAGS_1(rbit64, TCG_CALL_NO_RWG_SE, i64, i64)
 DEF_HELPER_FLAGS_1(clz64, TCG_CALL_NO_RWG_SE, i64, i64)
 DEF_HELPER_FLAGS_2(rintd, TCG_CALL_NO_RWG_SE, f64, f64, ptr)
+DEF_HELPER_FLAGS_2(rints, TCG_CALL_NO_RWG_SE, f32, f32, ptr)
 DEF_HELPER_1(tb_flush, void, env)
 
 
Index: qemu-1.6.0+dfsg/target-arm/translate-a64.c
===================================================================
--- qemu-1.6.0+dfsg.orig/target-arm/translate-a64.c	2013-11-05 22:23:30.215397737 +0000
+++ qemu-1.6.0+dfsg/target-arm/translate-a64.c	2013-11-05 22:23:30.211397748 +0000
@@ -1880,6 +1880,13 @@
     case 0x3: /* FSQRT */
         gen_helper_vfp_sqrtd(tcg_res, tcg_op, cpu_env);
         break;
+    case 0x4: /* FCVT (double to single) */
+        gen_helper_vfp_fcvtsd(tcg_res, tcg_op, cpu_env);
+        break;
+#if 0 /* XXX */
+    case 0x7: /* FCVT (double to half) */
+        break;
+#endif
     case 0x8: /* FRINTN XXX add rounding mode */
     case 0x9: /* FRINTP */
     case 0xa: /* FRINTM */
@@ -1914,6 +1921,7 @@
     TCGv_i32 tcg_op = tcg_temp_new_i32();
     TCGv_i32 tcg_res = tcg_temp_new_i32();
     TCGv_ptr fpst = get_fpstatus_ptr();
+    bool skip_write = false;
 
     tcg_gen_ld_i64(tcg_tmp, cpu_env, freg_offs_n);
     tcg_gen_trunc_i64_i32(tcg_op, tcg_tmp);
@@ -1928,14 +1936,38 @@
     case 0x2: /* FNEG */
         gen_helper_vfp_negs(tcg_res, tcg_op);
         break;
+    case 0x3: /* FSQRT */
+        gen_helper_vfp_sqrts(tcg_res, tcg_op, cpu_env);
+        break;
+    case 0x5: /* FCVT (single to double) */
+        skip_write = true;
+        gen_helper_vfp_fcvtds(tcg_tmp, tcg_op, cpu_env);
+        clear_fpreg(rd);
+        tcg_gen_st_i64(tcg_tmp, cpu_env, freg_offs_d);
+        break;
+#if 0 /* XXX */
+    case 0x7: /* FCVT (single to half) */
+        break;
+#endif
+    case 0x8: /* FRINTN XXX add rounding mode */
+    case 0x9: /* FRINTP */
+    case 0xa: /* FRINTM */
+    case 0xb: /* FRINTZ */
+    case 0xc: /* FRINTA */
+    case 0xe: /* FRINTX */
+    case 0xf: /* FRINTI */
+        gen_helper_rints(tcg_res, tcg_op, fpst);
+        break;
     default:
         unallocated_encoding(s);
         return;
     }
 
-    clear_fpreg(rd);
-    tcg_gen_ext32u_i64(tcg_tmp, tcg_res);
-    tcg_gen_st32_i64(tcg_tmp, cpu_env, freg_offs_d);
+    if (!skip_write) {
+        clear_fpreg(rd);
+        tcg_gen_ext32u_i64(tcg_tmp, tcg_res);
+        tcg_gen_st32_i64(tcg_tmp, cpu_env, freg_offs_d);
+    }
 
     tcg_temp_free_ptr(fpst);
     tcg_temp_free_i32(tcg_op);
