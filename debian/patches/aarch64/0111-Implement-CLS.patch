From e3f209020391647ee7da940c9f6745fe1e3c2230 Mon Sep 17 00:00:00 2001
From: Michael Matz <matz@suse.de>
Date: Fri, 22 Mar 2013 19:19:45 +0100
Subject: [PATCH 111/169] Implement CLS

This implements the remaining instruction of the data processing 1
source page, count leading sign bits.
---
 target-arm/translate-a64.c | 23 +++++++++++++++++------
 1 file changed, 17 insertions(+), 6 deletions(-)

Index: qemu-1.6.0+dfsg/target-arm/translate-a64.c
===================================================================
--- qemu-1.6.0+dfsg.orig/target-arm/translate-a64.c	2013-11-05 22:23:38.767375598 +0000
+++ qemu-1.6.0+dfsg/target-arm/translate-a64.c	2013-11-05 22:23:38.763375608 +0000
@@ -1553,9 +1553,13 @@
     case 0x5: /* CLS */
 	{
 	  TCGv_i64 tcg_val = tcg_temp_new_i64();
+	  int reduce = 0;
 
 	  if (is_32bit) {
-	      tcg_gen_ext32u_i64(tcg_val, cpu_reg(rn));
+	      if (opcode == 0x4)
+		tcg_gen_ext32u_i64(tcg_val, cpu_reg(rn));
+	      else
+		tcg_gen_ext32s_i64(tcg_val, cpu_reg(rn));
 	  } else {
 	      tcg_gen_mov_i64(tcg_val, cpu_reg(rn));
 	  }
@@ -1563,15 +1567,22 @@
 	  if (opcode == 0x4) {
 	      gen_helper_clz64(cpu_reg(rd), tcg_val);
 	      if (is_32bit) {
-		  tcg_gen_subi_i64(cpu_reg(rd), cpu_reg(rd), 32);
+		  reduce = 32;
 	      }
 	  } else {
-	      /* XXX to be implemented */
-	      unallocated_encoding(s);
-	      return;
+	      /* cls == clz(V ^ V>>1)-1, V being signed */
+	      tcg_gen_sari_i64 (cpu_reg(rd), tcg_val, 1);
+	      tcg_gen_xor_i64 (tcg_val, cpu_reg(rd), tcg_val);
+	      gen_helper_clz64 (cpu_reg(rd), tcg_val);
+	      if (is_32bit)
+		reduce = 33;
+	      else
+		reduce = 1;
 	  }
-
 	  tcg_temp_free_i64(tcg_val);
+
+	  if (reduce)
+	    tcg_gen_subi_i64(cpu_reg(rd), cpu_reg(rd), reduce);
 	}
     }
 
