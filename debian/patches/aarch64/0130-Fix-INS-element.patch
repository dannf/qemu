From 4146d40378949acecbc54f3ff36c8dd452519508 Mon Sep 17 00:00:00 2001
From: Michael Matz <matz@suse.de>
Date: Sun, 31 Mar 2013 01:55:15 +0100
Subject: [PATCH 130/169] Fix INS element

Accidentally this had a fallthrough to the switch remaining, leading
to unknown insns.
---
 target-arm/translate-a64.c | 32 ++++++++++++++++----------------
 1 file changed, 16 insertions(+), 16 deletions(-)

Index: qemu-1.6.0+dfsg/target-arm/translate-a64.c
===================================================================
--- qemu-1.6.0+dfsg.orig/target-arm/translate-a64.c	2013-11-05 22:23:42.571365751 +0000
+++ qemu-1.6.0+dfsg/target-arm/translate-a64.c	2013-11-05 22:23:42.567365761 +0000
@@ -3535,22 +3535,22 @@
 	      handle_ins_elem(s, insn);
 	    else if (get_bits(insn, 29, 2) == 1) { /* unalloc */
 		goto unknown_insn;
-	    }
-	    switch (get_bits(insn, 11, 4)) {
-	    case 0x1: /* DUP general reg */
-		handle_dupg(s, insn);
-		break;
-	    case 0x7: /* UMOV */
-	    case 0x5: /* SMOV */
-		handle_umov_smov(s, insn);
-		break;
-	    case 0x3: /* INS general reg */
-		handle_insg(s, insn);
-		break;
-	    case 0x0: /* DUP element */
-	    default:
-		goto unknown_insn;
-	    }
+	    } else
+	      switch (get_bits(insn, 11, 4)) {
+	      case 0x1: /* DUP general reg */
+		  handle_dupg(s, insn);
+		  break;
+	      case 0x7: /* UMOV */
+	      case 0x5: /* SMOV */
+		  handle_umov_smov(s, insn);
+		  break;
+	      case 0x3: /* INS general reg */
+		  handle_insg(s, insn);
+		  break;
+	      case 0x0: /* DUP element */
+	      default:
+		  goto unknown_insn;
+	      }
         } else if (get_bits(insn, 21, 1) &&
                    get_bits(insn, 10, 1)) {
 	    if (get_bits(insn, 11, 5) == 0x3)
