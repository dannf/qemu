From a9238b3bd36680b36efd9093ff131c981ea2d9c0 Mon Sep 17 00:00:00 2001
From: Michael Matz <matz@suse.de>
Date: Thu, 4 Apr 2013 17:03:25 +0200
Subject: [PATCH 140/169] Implement vector MUL/PMUL

The AdvSIMD three-same page needs an overhaul, when we use the neon
helpers we currently do too much work for no reason.
---
 target-arm/translate-a64.c | 19 ++++++++++++++++++-
 1 file changed, 18 insertions(+), 1 deletion(-)

Index: qemu-1.6.0+dfsg/target-arm/translate-a64.c
===================================================================
--- qemu-1.6.0+dfsg.orig/target-arm/translate-a64.c	2013-11-05 22:23:44.611360472 +0000
+++ qemu-1.6.0+dfsg/target-arm/translate-a64.c	2013-11-05 22:23:44.603360492 +0000
@@ -2724,6 +2724,13 @@
     int i;
 
     switch (opcode) {
+    case 0x13: /* MUL / PMUL */
+	if (is_u && size != 0) {
+	    /* PMUL is only defined for bytes.  */
+	    unallocated_encoding(s);
+	    return;
+	}
+	break;
 	       /* base / pair  / sz&2 / sz&2 && pair */
     case 0x1a: /* FADD / FADDP / FSUB / FABD */
 	is_float = true;
@@ -2739,6 +2746,10 @@
 	break;
     }
 
+    /* XXX this is all suboptimal.  When we use the neon helpers
+       they already work on a whole 32bit vector (e.g. 4 bytes at once),
+       but we still do the loop element-wise, i.e. do four times or
+       twice as much work as needed.  */
     for (i = 0; i < (is_q ? 16 : 8); i += ebytes) {
         simd_ld(tcg_op1, freg_offs_n + i, size, !is_u);
         simd_ld(tcg_op2, freg_offs_m + i, size, !is_u);
@@ -2751,6 +2762,13 @@
                 tcg_gen_add_i64(tcg_res, tcg_op1, tcg_op2);
             }
             break;
+	case 0x13: /* MUL / PMUL */
+	    if (is_u) {
+		gen_helper_neon_mul_p8 (tcg_res, tcg_op1, tcg_op2);
+	    } else {
+		tcg_gen_mul_i64(tcg_res, tcg_op1, tcg_op2);
+	    }
+	    break;
 	case 0x0c: /* SMAX / UMAX */
 	    tcg_gen_movcond_i64 (is_u ? TCG_COND_GEU : TCG_COND_GE,
 				 tcg_res,
@@ -2819,7 +2837,6 @@
 	case 0x0a: /* SRSHL / URSHL (rounding) */
 	case 0x0b: /* SQRSHL / UQRSHL (sat + round) */
 	    {
-	      /* The neon helpers expect 32bit TCGv's for sizes < 64.  */
 	      TCGv_i32 insncode = tcg_const_i32(insn);
 	      /* The saturating ones might set the QC flag in fpcsr,
 	         so need the environment.  */
