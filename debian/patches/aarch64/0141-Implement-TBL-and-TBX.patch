From 652dc1ab1b176463770ec765fbb677b49a77e45e Mon Sep 17 00:00:00 2001
From: Michael Matz <matz@suse.de>
Date: Thu, 4 Apr 2013 17:55:29 +0200
Subject: [PATCH 141/169] Implement TBL and TBX

Only tested TBL (with python3 testsuite, test_codecs test).
---
 target-arm/helper-a64.c    | 36 ++++++++++++++++++++++++++++++++++++
 target-arm/helper.h        |  1 +
 target-arm/translate-a64.c |  8 +++++++-
 3 files changed, 44 insertions(+), 1 deletion(-)

Index: qemu-1.6.0+dfsg/target-arm/helper-a64.c
===================================================================
--- qemu-1.6.0+dfsg.orig/target-arm/helper-a64.c	2013-11-05 22:23:44.803359974 +0000
+++ qemu-1.6.0+dfsg/target-arm/helper-a64.c	2013-11-05 22:23:44.799359984 +0000
@@ -340,3 +340,39 @@
     default: return 0;
     }
 }
+
+void HELPER(simd_tbl)(CPUARMState *env, uint32_t insn)
+{
+    int rd = get_bits(insn, 0, 5);
+    int rn = get_bits(insn, 5, 5);
+    int rm = get_bits(insn, 16, 5);
+    bool is_tbl = get_bits(insn, 12, 1);
+    int len = get_bits(insn, 13, 2);
+    bool is_q = get_bits(insn, 30, 1);
+    int shift, pass;
+    int regs = len + 1;
+    uint64_t indices;
+
+    for (pass = 0; pass < (is_q ? 2 : 1); pass++) {
+	indices = env->vfp.regs[rm * 2 + pass];
+	uint64_t val = 0;
+	for (shift = 0; shift < 64; shift += 8) {
+	    int index = (indices >> shift) & 0xff;
+	    if (index < 16 * regs) {
+		/* Index counts in bytes, tabelem in 64bits,
+		   and it's defined modulo.  */
+		int tabelem = rn * 2 + (index >> 3);
+		uint64_t tmp;
+		if (tabelem >= 64)
+		  tabelem -= 64;
+		tmp = env->vfp.regs[tabelem] >> ((index & 7) << 3) & 0xff;
+		val |= tmp << shift;
+	    } else if (!is_tbl) {
+		val |= env->vfp.regs[rd * 2 + pass] & (0xffUL << shift);
+	    }
+	}
+	env->vfp.regs[rd * 2 + pass] = val;
+    }
+    if (!is_q)
+      env->vfp.regs[rd * 2 + 1] = 0;
+}
Index: qemu-1.6.0+dfsg/target-arm/helper.h
===================================================================
--- qemu-1.6.0+dfsg.orig/target-arm/helper.h	2013-11-05 22:23:44.803359974 +0000
+++ qemu-1.6.0+dfsg/target-arm/helper.h	2013-11-05 22:23:44.799359984 +0000
@@ -498,6 +498,7 @@
 DEF_HELPER_FLAGS_2(rints, TCG_CALL_NO_RWG_SE, f32, f32, ptr)
 DEF_HELPER_FLAGS_3(simd_op3s, TCG_CALL_NO_RWG_SE, i64, i64, i64, i32)
 DEF_HELPER_4(simd_op3s_env, i64, env, i64, i64, i32)
+DEF_HELPER_2(simd_tbl, void, env, i32)
 DEF_HELPER_1(tb_flush, void, env)
 DEF_HELPER_2(set_rmode, void, i32, ptr)
 
Index: qemu-1.6.0+dfsg/target-arm/translate-a64.c
===================================================================
--- qemu-1.6.0+dfsg.orig/target-arm/translate-a64.c	2013-11-05 22:23:44.803359974 +0000
+++ qemu-1.6.0+dfsg/target-arm/translate-a64.c	2013-11-05 22:23:44.799359984 +0000
@@ -3703,7 +3703,13 @@
 		handle_simd_zip(s, insn);
 	    } else {
 		/* AdvSIMD TBL/TBX */
-		goto unknown_insn;
+		if (get_bits(insn, 22, 2))
+		  goto unknown_insn;
+		else {
+		    TCGv_i32 tcginsn = tcg_const_i32(insn);
+		    gen_helper_simd_tbl(cpu_env, tcginsn);
+		    tcg_temp_free_i32(tcginsn);
+		}
 	    }
         } else {
             goto unknown_insn;
