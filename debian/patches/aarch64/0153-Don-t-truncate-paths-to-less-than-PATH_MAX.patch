From 4e81655f1bbe5a7893f24731d5378733aade92ea Mon Sep 17 00:00:00 2001
From: Michael Matz <matz@suse.de>
Date: Wed, 10 Apr 2013 18:21:00 +0200
Subject: [PATCH 153/169] Don't truncate paths to less than PATH_MAX

resolve_dirfd_path used a buffer of 1024 (< PATH_MAX) and readlink
doesn't return errors when the buffer is too small (it silently
truncates), so when the path was very long (> 1024) it got truncated
and wrong files or error codes were returned.  Using PATH_MAX
as buffer size readlink won't truncate (if the name is larger it will
correctly return ENAMETOOLONG, and the callers will do the right thing).
---
 linux-user/syscall.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

Index: qemu-1.6.0+dfsg/linux-user/syscall.c
===================================================================
--- qemu-1.6.0+dfsg.orig/linux-user/syscall.c	2013-11-05 22:23:47.243353658 +0000
+++ qemu-1.6.0+dfsg/linux-user/syscall.c	2013-11-05 22:23:47.243353658 +0000
@@ -5272,7 +5272,7 @@
 static int do_openat(void *cpu_env, int dirfd, const char *path,
                      int flags, mode_t mode)
 {
-    char real_path[1024];
+    char real_path[PATH_MAX+1];
     int r;
 
     r = resolve_dirfd_path(dirfd, path, real_path, sizeof(real_path));
